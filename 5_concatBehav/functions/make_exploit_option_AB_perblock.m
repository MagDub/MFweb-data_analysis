function [chosenOptionFreqAB,chosenOptionFreqAB_desc, exploitMatAllPart_LH, exploitMatAllPart_LH_desc, FreqisExploited, FreqisExplored, chosenOptionFreqAB_splitinAB, chosenOptionFreqAB_splitinAB_desc]=make_exploit_option_AB_perblock(ID_mat,block_)

    data_fold = ('../../data/');
    dir_data = (strcat(data_fold,'sanity_check/'));

    %run_make_exploit_option
    exploitMatAllPart_LH = {};
    FreqisExploited = {};
    FreqisExplored = {};
    chosenOptionFreq = nan(size(ID_mat,2),6);
    
    for ID_n=1:size(ID_mat,2)
    
    part = ID_mat(ID_n);

        % start loop
        tmp = load(strcat(dir_data, 'user_',num2str(part),'/mat_AB.mat'));
        
        meanA=mean([tmp.mat_AB(:,5),tmp.mat_AB(:,6),tmp.mat_AB(:,7)]')';
        stdA=std([tmp.mat_AB(:,5),tmp.mat_AB(:,6),tmp.mat_AB(:,7)]')';
        maxA=max(tmp.mat_AB(:,5),max(tmp.mat_AB(:,6),tmp.mat_AB(:,7)));
        minA=min(tmp.mat_AB(:,5),min(tmp.mat_AB(:,6),tmp.mat_AB(:,7)));

        valueB=tmp.mat_AB(:,8);
        chosen=tmp.mat_AB(:,9);
        hor=tmp.mat_AB(:,3);
        gameID=tmp.mat_AB(:,4);
        sizeChosenApple=tmp.mat_AB(:,10);
        block=tmp.mat_AB(:,1);
        blocktrial=tmp.mat_AB(:,2);

        values = [meanA,valueB];
        [maxValues,IndmaxValues] = max(values');
        exploitTree=IndmaxValues';
        exploitTreeValue=maxValues';

        exploitMat=[hor,exploitTree,chosen,gameID,sizeChosenApple,block,blocktrial,exploitTreeValue];
        exploitMat([exploitMat(:,6)~=block_],:)=[];

        exploitMat_SH=exploitMat(exploitMat(:,1)==6,2:8);
        exploitMat_LH=exploitMat(exploitMat(:,1)==11,2:8);

        % SH
        exploitChosenSH = exploitMat_SH(:,1)==exploitMat_SH(:,2);
        exploreChosenSH = [];
        exploreChosenSH_exploitisA = [];
        exploreChosenSH_exploitisB = [];
        exploitChosenSH_exploitisA = [];
        exploitChosenSH_exploitisB = [];
            for i=1:size(exploitMat_SH,1)
                exploreChosenSH(end+1,1)=((exploitMat_SH(i,1)==1)&&(exploitMat_SH(i,2)==2))||((exploitMat_SH(i,1)==2)&&(exploitMat_SH(i,2)==1));
                exploreChosenSH_exploitisA(end+1,1)=((exploitMat_SH(i,1)==1)&&(exploitMat_SH(i,2)==2));
                exploreChosenSH_exploitisB(end+1,1)=((exploitMat_SH(i,1)==2)&&(exploitMat_SH(i,2)==1));
                exploitChosenSH_exploitisA(end+1,1)=((exploitMat_SH(i,1)==1)&&(exploitMat_SH(i,2)==1));
                exploitChosenSH_exploitisB(end+1,1)=((exploitMat_SH(i,1)==2)&&(exploitMat_SH(i,2)==2));
            end
        novelChosenSH = exploitMat_SH(:,2)==3;

        % LH
        exploitChosenLH = exploitMat_LH(:,1)==exploitMat_LH(:,2);
        exploreChosenLH = [];
        exploreChosenLH_exploitisA = [];
        exploreChosenLH_exploitisB = [];
        exploitChosenLH_exploitisA = [];
        exploitChosenLH_exploitisB = [];
            for i=1:size(exploitMat_LH,1)
                exploreChosenLH(end+1,1)=((exploitMat_LH(i,1)==1)&&(exploitMat_LH(i,2)==2))||((exploitMat_LH(i,1)==2)&&(exploitMat_LH(i,2)==1));
                exploreChosenLH_exploitisA(end+1,1)=((exploitMat_LH(i,1)==1)&&(exploitMat_LH(i,2)==2));
                exploreChosenLH_exploitisB(end+1,1)=((exploitMat_LH(i,1)==2)&&(exploitMat_LH(i,2)==1));
                exploitChosenLH_exploitisA(end+1,1)=((exploitMat_LH(i,1)==1)&&(exploitMat_LH(i,2)==1));
                exploitChosenLH_exploitisB(end+1,1)=((exploitMat_LH(i,1)==2)&&(exploitMat_LH(i,2)==2));
            end
        novelChosenLH = exploitMat_LH(:,2)==3;

        exploitMatAllPart_LH_desc = {'exploitTree','chosen','gameID','sizeChosenApple','block','blocktrial', 'exploitTreevalue'};
        exploitMatAllPart_LH{ID_n}=exploitMat_LH;

        FreqisExploited{ID_n}.TreeA_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==exploitMat_LH(:,2)),1)==1),1);
        FreqisExploited{ID_n}.TreeA_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==exploitMat_SH(:,2)),1)==1),1);
        FreqisExploited{ID_n}.TreeB_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==exploitMat_LH(:,2)),1)==2),1);
        FreqisExploited{ID_n}.TreeB_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==exploitMat_SH(:,2)),1)==2),1);
        
        FreqisExplored{ID_n}.TreeB_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==1),2)==2),1); % exploit is A, B is explored
        FreqisExplored{ID_n}.TreeB_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==1),2)==2),1);
        FreqisExplored{ID_n}.TreeA_LH=size(find(exploitMat_LH(find(exploitMat_LH(:,1)==2),2)==1),1); % exploit is B, A is explored
        FreqisExplored{ID_n}.TreeA_SH=size(find(exploitMat_SH(find(exploitMat_SH(:,1)==2),2)==1),1);
        
        % exploitSH, exploreSH, novelSH, exploitLH, exploreLH, novelLH
        chosenOptionFreq_SH(ID_n,:)=sum([exploitChosenSH,exploreChosenSH,novelChosenSH]); 
        chosenOptionFreq_LH(ID_n,:)=sum([exploitChosenLH,exploreChosenLH,novelChosenLH]); 

    end

    chosenOptionFreqAB_desc={'exploitSH', 'exploreSH','novelSH', 'exploitLH', 'exploreLH', 'novelLH'};
    chosenOptionFreqAB = [chosenOptionFreq_SH, chosenOptionFreq_LH];
    
    chosenOptionFreqAB_splitinAB_desc = {};
    chosenOptionFreqAB_splitinAB = [];

end